== Introduction ==

Wisqi (pronounced like whisky) is Windows Squibby Installer. Wisqi installs
Squibby inside a file within a windows partition, and thus it does not
require CD burning or dedicated partitions, yet the installation is a
dual boot setup identical to a normal installation.

Wisqi is a very light fork of Wubi, the Windows Ubuntu Installer.
For more information about Wubi see:

http://wubi-installer.org
http://wiki.ubuntu.com/WubiGuide

== Compiling ==

 * make wisqi: builds wisqi.exe, note that the first time you run it, you will have
to install python inside of wine, this is performed automatically, just
confirm all the default choices in the installation screens that will appear.
 * make runpy: runs wisqi under wine directly from source
 * make runbin: builds wisqi and runs the packaged binary under wine
 * make wisqizip: creates a special zip file conatining python.exe and non
   byte compiled python files that is convenient for debugging purposes.
   Inside of Windows, unzip the archive, then run
   "python.exe main.py --verbose". You can edit any file inside of ./lib.
 * make pot: generates a gettext template (po/wisqi.pot)

== Code overview ==

 * src/winui: thin ctypes wrapper around win32 native graphical user
interface
 * src/pylauncher: makes python code into an executable, the python
script is examined and all the dependencies are added to an lzma
archive, then an executable header is concatenated to the archive that
decompresses it and runs the script using the python dll
 * src/wisqi: the main wisqi application, the code is split between backend
and frontend, where each runs in its own thread. The two interact via a
tasklist object, where the frontend usually runs a tasklist which is a set
of backend tasks. Backends and frontends are platform specific. For
now only the Windows platform is supported.
 * data: settings for Wisqi branding and customization
 * po: translations
 * bin: other binary files required at runtime (will be compiled at a later
stage)

== Wisqi tasks ==

Wisqi performs the following tasks

 * fetches information about the running system which will be used
during installation
 * checks that the minimum installation requirements are met
 * retrieves required user information via a GUI
 * looks for available local CDs and ISO files
 * downloads the ISO if one is required, using bittorrent and an http
download manager
 * checks the ISO/CD md5 sums and the md5 signature
 * extracts the kernel and initrd from the ISO
 * adds a new boot entry to the existing windows bootloader
 * prepares a preseed file to be used during the linux-side installation
 * allocates space for the virtual disk files

The actual installation is performed within linux after rebooting the
machine.

== Customizations ==

 * edit the files in data as appropriate and build your image
 * you will need to provide an ISO that is similar to the Ubuntu ISO and in
particular it must have .disk/info formatted like .disk/info in the Ubuntu ISO
 * you must provide a webserver with metalink file, metalink file md5
checksums and signatures for the md5 sums
 * add your signing key to data/trustedkeys.gpg
 * on the linux side, the distribution must be capable of booting and
rebooting off a loop file, perform an automatic installation and accept
the special boot parameters that indicate the local preseed file and ISO
image to boot from.

== License ==

GPL v2

See LICENSE
